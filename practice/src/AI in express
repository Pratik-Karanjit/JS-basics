1. Package json


Note: tensorflow/tfjs is used instead of the recommended tensorflow/tfjs-node as the latter was not compatible with npm gyp and others. 
tensorflow/tfjs requires python supported version.
Sharp is used for image processing with mobilenet.
MobileNet is a pre trained model that provides basic image classification.


// {
//   "dependencies": {
//     "@tensorflow-models/mobilenet": "^2.1.1",
//     "@tensorflow/tfjs": "^4.20.0",
//     "canvas": "^2.11.2",
//     "cors": "^2.8.5",
//     "dotenv": "^16.4.5",
//     "express": "^4.19.2",
//     "mongoose": "^8.5.3",
//     "multer": "^1.4.5-lts.1",
//     "node-fetch": "^2.7.0",
//     "node-gyp": "^10.2.0",
//     "sharp": "^0.33.5"
//   },
//   "name": "smart-healthcare-assistant",
//   "version": "1.0.0",
//   "main": "index.js",
//   "type": "module",
//   "scripts": {
//     "start": "node index.js"
//   },
//   "keywords": [],
//   "author": "",
//   "license": "ISC",
//   "description": ""
// }



2. MedicalImage.js - This model file has all the required logic.

// import * as tf from "@tensorflow/tfjs";
// import * as mobilenet from "@tensorflow-models/mobilenet";
// import sharp from "sharp";
// import { get } from "https";

// // Load the model
// let model;
// const loadModel = async () => {
//   model = await mobilenet.load();
//   console.log("Model loaded");
// };

// loadModel();

// // Process the image and classify
// export const classifyImage = async (imageUrl) => {
//   if (!model) {
//     throw new Error("Model is not loaded yet");
//   }

//   // Fetch the image from the URL
//   const imageBuffer = await new Promise((resolve, reject) => {
//     get(imageUrl, (res) => {
//       const data = [];
//       res.on("data", (chunk) => {
//         data.push(chunk);
//       });
//       res.on("end", () => {
//         resolve(Buffer.concat(data));
//       });
//     }).on("error", (err) => {
//       reject(err);
//     });
//   });

//   console.log("image buffer here", imageBuffer);

//   // Process the image using sharp
//   const { data, info } = await sharp(imageBuffer)
//     .resize(224, 224) // Resize to the dimensions expected by the MobileNet model
//     .toFormat("jpeg") // Convert to JPEG format
//     .ensureAlpha()
//     .raw()
//     .toBuffer({ resolveWithObject: true });

//   // Convert the resized image buffer to a tensor
//   const imgTensor = tf.tensor(
//     new Uint8Array(data),
//     [1, info.height, info.width, 4],
//     "int32"
//   );

//   // Remove the alpha channel if present (convert from 4 to 3 channels)
//   const imgTensor3D = imgTensor.slice([0, 0, 0, 0], [-1, -1, -1, 3]);

//   // Classify the image
//   const predictions = await model.classify(imgTensor3D);
//   return predictions;
// };



3. AnalysisController.js  -  

// controller.js
// import { classifyImage } from "../models/medicalImage.js";

// export const classifyImageHandler = async (req, res) => {
//   console.log("entered controller");
//   const { imageUrl } = req.body;
//   console.log("image reached here", imageUrl);

//   if (!imageUrl) {
//     return res.status(400).send("Image URL is required");
//   }

//   try {
//     const predictions = await classifyImage(imageUrl);
//     res.json(predictions);
//   } catch (error) {
//     console.error("Error classifying image:", error);
//     res.status(500).send("An error occurred while classifying the image");
//   }
// };



